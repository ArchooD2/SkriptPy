import importlib.util
import sys
import os
from skriptpy.core import ctx
import re

def transpile_py_to_sk(input_file, output_file):
    """
    Transpiles a Python script using skriptpy to a Skript language file.
    
    Loads the specified Python module, collects commands and events from the skriptpy context,
    and writes their Skript representations to the output file with a generated header.
    """
    spec = importlib.util.spec_from_file_location("script", input_file)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)

    with open(output_file, "w") as f:
        f.write("# Generated by skriptpy\n\n")
        for cmd in ctx.commands:
            f.write(cmd.to_skript() + "\n\n")
        for evt in ctx.events:
            f.write(evt.to_skript() + "\n\n")

def transpile_sk_to_py(skript_code):
    """
    Transpiles Skript code into equivalent Python code using the skriptpy framework.
    
    Parses Skript source code line by line, converting recognized constructs such as
    commands, events, control flow, and actions into Python code with appropriate
    decorators and context managers. Maintains block structure and context stack
    based on indentation. Returns the generated Python code as a string.
    
    Args:
        skript_code: The Skript source code to transpile.
    
    Returns:
        A string containing the transpiled Python code.
    """
    lines = skript_code.splitlines()
    output = ["from skriptpy.core import *\n"]
    indent_stack = [0]
    current_block = None

    for line in lines:
        stripped = line.strip()
        indent = len(line) - len(stripped)

        while indent < indent_stack[-1]:
            indent_stack.pop()
            if current_block:
                output.append(" " * indent_stack[-1] + "ctx.pop()")

        if stripped.startswith("command /"):
            cmd_name = re.findall(r"command /([^:]+):", stripped)[0]
            output.append(f'@command("{cmd_name}")\ndef _():')
            indent_stack.append(indent + 4)

        elif stripped.startswith("on "):
            evt = re.findall(r"on ([^:]+):", stripped)[0]
            output.append(f'@event("{evt}")\ndef _():')
            indent_stack.append(indent + 4)

        elif stripped.startswith("trigger:"):
            continue

        elif stripped.startswith("send "):
            msg = re.findall(r'send "(.*?)"', stripped)[0]
            output.append(" " * indent_stack[-1] + f'send("{msg}")')

        elif stripped.startswith("broadcast "):
            msg = re.findall(r'broadcast "(.*?)"', stripped)[0]
            output.append(" " * indent_stack[-1] + f'broadcast("{msg}")')

        elif stripped.startswith("teleport "):
            parts = stripped.split()
            output.append(" " * indent_stack[-1] + f'teleport("{parts[1]}", "{parts[3]}")')

        elif stripped.startswith("set {"):
            m = re.match(r"set \{(.+?)::%player's uuid%\} to (.+)", stripped)
            if m:
                output.append(" " * indent_stack[-1] + f'set_var("{m[1]}", {m[2]})')
            else:
                m = re.match(r"set \{_(.+?)\} to (.+)", stripped)
                if m:
                    output.append(" " * indent_stack[-1] + f'set_local("{m[1]}", {m[2]})')

        elif stripped.startswith("if "):
            condition = stripped[3:].rstrip(":")
            output.append(" " * indent_stack[-1] + f'with If("{condition}"):')
            indent_stack.append(indent + 4)

        elif stripped.startswith("else:"):
            output.append(" " * indent_stack[-1] + f'with Else():')
            indent_stack.append(indent + 4)

        elif stripped.startswith("loop "):
            if "all players" in stripped:
                output.append(" " * indent_stack[-1] + "with loop_players():")
            else:
                times = re.findall(r"loop (\d+) times", stripped)[0]
                output.append(" " * indent_stack[-1] + f"with loop_times({times}):")
            indent_stack.append(indent + 4)

    while len(indent_stack) > 1:
        indent_stack.pop()
        output.append(" " * indent_stack[-1] + "ctx.pop()")

    return "\n".join(output)

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python skriptpy_cli.py input_file output_file")
        sys.exit(1)

    input_file, output_file = sys.argv[1], sys.argv[2]

    if input_file.endswith(".py"):
        transpile_py_to_sk(input_file, output_file)
    elif input_file.endswith(".sk"):
        with open(input_file, "r") as f:
            skript_code = f.read()
        python_code = transpile_sk_to_py(skript_code)
        with open(output_file, "w") as f:
            f.write(python_code)
    else:
        print("Unsupported input file type. Must be .py or .sk")
        sys.exit(1)
